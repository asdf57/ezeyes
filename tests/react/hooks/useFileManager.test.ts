import '@testing-library/jest-dom';
import * as ipc from '../../../src/electron/ipc';
import { read, readDocx, readPdf, spawnFileDialog } from '../../../src/electron/ipc';

beforeEach(() => {
	jest.clearAllMocks();
});

import { trimWhitespace, processRTFContent, loadRtfFile } from  '../../../src/react/hooks/useFileManager';

//Encode as base 64 to circumvent typescript raw string compile-time issues
const rtfText1: string = "e1xydGYxXGFuc2lcZGVmZjNcYWRlZmxhbmcxMDI1CntcZm9udHRibHtcZjBcZnJvbWFuXGZwcnEyXGZjaGFyc2V0MCBUaW1lcyBOZXcgUm9tYW47fXtcZjFcZnJvbWFuXGZwcnEyXGZjaGFyc2V0MiBTeW1ib2w7fXtcZjJcZnN3aXNzXGZwcnEyXGZjaGFyc2V0MCBBcmlhbDt9e1xmM1xmcm9tYW5cZnBycTJcZmNoYXJzZXQwIExpYmVyYXRpb24gU2VyaWZ7XCpcZmFsdCBUaW1lcyBOZXcgUm9tYW59O317XGY0XGZzd2lzc1xmcHJxMlxmY2hhcnNldDAgTGliZXJhdGlvbiBTYW5ze1wqXGZhbHQgQXJpYWx9O317XGY1XGZuaWxcZnBycTJcZmNoYXJzZXQwIFBpbmdGYW5nIFNDO317XGY2XGZzd2lzc1xmcHJxMFxmY2hhcnNldDEyOCBBcmlhbCBVbmljb2RlIE1TO317XGY3XGZuaWxcZnBycTJcZmNoYXJzZXQwIEFyaWFsIFVuaWNvZGUgTVM7fX0Ke1xjb2xvcnRibDtccmVkMFxncmVlbjBcYmx1ZTA7XHJlZDBcZ3JlZW4wXGJsdWUyNTU7XHJlZDBcZ3JlZW4yNTVcYmx1ZTI1NTtccmVkMFxncmVlbjI1NVxibHVlMDtccmVkMjU1XGdyZWVuMFxibHVlMjU1O1xyZWQyNTVcZ3JlZW4wXGJsdWUwO1xyZWQyNTVcZ3JlZW4yNTVcYmx1ZTA7XHJlZDI1NVxncmVlbjI1NVxibHVlMjU1O1xyZWQwXGdyZWVuMFxibHVlMTI4O1xyZWQwXGdyZWVuMTI4XGJsdWUxMjg7XHJlZDBcZ3JlZW4xMjhcYmx1ZTA7XHJlZDEyOFxncmVlbjBcYmx1ZTEyODtccmVkMTI4XGdyZWVuMFxibHVlMDtccmVkMTI4XGdyZWVuMTI4XGJsdWUwO1xyZWQxMjhcZ3JlZW4xMjhcYmx1ZTEyODtccmVkMTkyXGdyZWVuMTkyXGJsdWUxOTI7fQp7XHN0eWxlc2hlZXR7XHMwXHNuZXh0MFxydGxjaFxhZjdcYWZzMjRcYWxhbmcxMDgxIFxsdHJjaFxsYW5nMTAzM1xsYW5nZmUyMDUyXGhpY2hcYWYzXGxvY2hcd2lkY3RscGFyXGh5cGhwYXIwXGx0cnBhclxjZjBcZjNcZnMyNFxsYW5nMTAzM1xrZXJuaW5nMVxkYmNoXGFmOFxsYW5nZmUyMDUyIE5vcm1hbDt9CntcczE1XHNiYXNlZG9uMFxzbmV4dDE2XHJ0bGNoXGFmN1xhZnMyOCBcbHRyY2hcaGljaFxhZjRcbG9jaFxzYjI0MFxzYTEyMFxrZWVwblxmNFxmczI4XGRiY2hcYWY1IEhlYWRpbmc7fQp7XHMxNlxzYmFzZWRvbjBcc25leHQxNlxsb2NoXHNsMjc2XHNsbXVsdDFcc2IwXHNhMTQwIEJvZHkgVGV4dDt9CntcczE3XHNiYXNlZG9uMTZcc25leHQxN1xydGxjaFxhZjYgXGx0cmNoXGxvY2hcc2wyNzZcc2xtdWx0MVxzYjBcc2ExNDAgTGlzdDt9CntcczE4XHNiYXNlZG9uMFxzbmV4dDE4XHJ0bGNoXGFmNlxhZnMyNFxhaSBcbHRyY2hcbG9jaFxzYjEyMFxzYTEyMFxub2xpbmVcZnMyNFxpIENhcHRpb247fQp7XHMxOVxzYmFzZWRvbjBcc25leHQxOVxydGxjaFxhZjYgXGx0cmNoXGxvY2hcbm9saW5lIEluZGV4O30KfXtcKlxnZW5lcmF0b3IgTGlicmVPZmZpY2UvMjQuMi4wLjMkTWFjT1NYX0FBUkNINjQgTGlicmVPZmZpY2VfcHJvamVjdC9kYTQ4NDg4YTczZGRkNjZlYTI0Y2YxNmJiYzRmN2I5YzA4ZTliZWExfXtcaW5mb3tcY3JlYXRpbVx5cjIwMjRcbW8yXGR5MjZcaHIxNlxtaW4xOX17XHJldnRpbVx5cjIwMjRcbW8yXGR5MjZcaHIxNlxtaW4xOX17XHByaW50aW1ceXIwXG1vMFxkeTBcaHIwXG1pbjB9fXtcKlx1c2VycHJvcHN9XGRlZnRhYjcwOQpcaHlwaGF1dG8xXHZpZXdzY2FsZTYwXGZvcm1zaGFkZVxub2Jya3dycHRibFxwYXBlcmgxNTg0MFxwYXBlcncxMjI0MFxtYXJnbDExMzRcbWFyZ3IxMTM0XG1hcmd0MTEzNFxtYXJnYjExMzRcc2VjdGRcc2Jrbm9uZVxzZnRubmFyXHNhZnRubnJsY1xzZWN0dW5sb2NrZWQxXHBnd3N4bjEyMjQwXHBnaHN4bjE1ODQwXG1hcmdsc3huMTEzNFxtYXJncnN4bjExMzRcbWFyZ3RzeG4xMTM0XG1hcmdic3huMTEzNFxmdG5ialxmdG5zdGFydDFcZnRucnN0Y29udFxmdG5uYXJcYWVuZGRvY1xhZnRucnN0Y29udFxhZnRuc3RhcnQxXGFmdG5ucmxjCntcKlxmdG5zZXBcY2hmdG5zZXB9XHBnbmRlY1xwYXJkXHBsYWluIFxzMFxydGxjaFxhZjdcYWZzMjRcYWxhbmcxMDgxIFxsdHJjaFxsYW5nMTAzM1xsYW5nZmUyMDUyXGhpY2hcYWYzXGxvY2hcd2lkY3RscGFyXGh5cGhwYXIwXGx0cnBhclxjZjBcZjNcZnMyNFxsYW5nMTAzM1xrZXJuaW5nMVxkYmNoXGFmOFxsYW5nZmUyMDUyXHFsXGx0cnBhcntcbG9jaApUaGlzfQpccGFyIH0=";
const rtfText2: string = "";

describe('whitespace tests', () => {
	test('trimming whitespace only preserves other special characters (1)', () => {
		const res = trimWhitespace(" hello\n");
		expect(res).toEqual("hello\n");
	});

	test('trimming whitespace only preserves other special characters (2)', () => {
		const res = trimWhitespace("           hello\n      ");
		expect(res).toEqual("hello\n");
	});

	test('trimming whitespace only preserves other special characters (2)', () => {
		const res = trimWhitespace(" \thi there\n ");
		expect(res).toEqual("\thi there\n");
	});
});

// describe('docx processing tests', async () => {
// 	test('reading in first test docx document', async () => {
// 		const testDocxFile = await readDocx("../../files/article.docx");
// 		expect(testDocxFile).toBe("This is a test!");
// 	});

// 	test('reading in second test docx document', async () => {
// 		const docxContent = Buffer.from(docxText2, 'base64').toString('utf8');
// 		jest.spyOn(ipc, 'read').mockResolvedValue(docxContent);
// 		const content = await loadDocxFile("./docs/test2.docx");
// 		expect(content).toBe(`This is a test!
// 	});
// });

describe('rtf processing tests', () => {
	test('trimming whitespace only preserves other special characters (2)', () => {
		const testStrings = [
			"\\u8211?-",
			"\\u8211\\'2d",
			"\\u8221\\'94",
			"\\u8217\\'92s access to advanced technologies",
			"\\u-10179",
			"\\u8211?- \\u8220\\'93This is a test\\u8221\\'94.",
			"The quick brown fox jumps over the lazy dog \\u8212.",
			"\\u8218\\'92nd chance for success.",
			"\\u8211 ? - This is unusual.",
			"\\u8211\\'2d\\b Bold text\\b0.",
			"\\u This is invalid.",
			"\\u8221?--",
			"Start of sentence \\u8211 with dash, \\u201C\\'93quoted text\\u201D\\'94 end.",
			"\\u2026\\'85Ellipsis at start and end\\u2026",
			"This \\\\u8211 isn't a Unicode sequence."
		];

		expect(processRTFContent(testStrings[0])).toEqual("\\u8211");
		expect(processRTFContent(testStrings[1])).toEqual("\\u8211");
		expect(processRTFContent(testStrings[2])).toEqual("\\u8221");
		expect(processRTFContent(testStrings[3])).toEqual("\\u8217s access to advanced technologies");
		expect(processRTFContent(testStrings[4])).toEqual("\\u-10179");
		expect(processRTFContent(testStrings[5])).toEqual("\\u8211 \\u8220This is a test\\u8221.");
		expect(processRTFContent(testStrings[6])).toEqual("The quick brown fox jumps over the lazy dog \\u8212.");
		expect(processRTFContent(testStrings[7])).toEqual("\\u8218nd chance for success.");
		expect(processRTFContent(testStrings[8])).toEqual("\\u8211 This is unusual.");
		expect(processRTFContent(testStrings[9])).toEqual("\\u8211\\b Bold text\\b0.");
		expect(processRTFContent(testStrings[10])).toEqual("\\u This is invalid.");
		expect(processRTFContent(testStrings[11])).toEqual("\\u8221-");
		expect(processRTFContent(testStrings[12])).toEqual("Start of sentence \\u8211 with dash, \\u201Cquoted text\\u201D end.");
		expect(processRTFContent(testStrings[13])).toEqual("\\u2026Ellipsis at start and end\\u2026");
		expect(processRTFContent(testStrings[14])).toEqual("This \\\\u8211 isn't a Unicode sequence.");
	});

	test('reading in first test RTF document', async () => {
		const rtfContent = Buffer.from(rtfText1, 'base64').toString('utf8');
		jest.spyOn(ipc, 'read').mockResolvedValue(rtfContent);
		const content = await loadRtfFile("./docs/test1.rtf");
		expect(content).toBe("This");
	});

	test('reading in second test RTF document', async () => {
		const rtfContent = Buffer.from(rtfText2, 'base64').toString('utf8');
		jest.spyOn(ipc, 'read').mockResolvedValue(rtfContent);
		const content = await loadRtfFile("./docs/test1.rtf");
		expect(content).toBe(`This is a test!
Font size
highlight
colored text
BOLD
Italicized
New font
Underlined
Edward by the grace of God King of England, lord of Ireland and duke of Aquitaine sends greetings to all to whom the present letters come. We have inspected the great charter of the lord Henry, late King of England, our father, concerning the liberties of England in these words: Henry by the grace of God King of England, lord of Ireland, duke of Normandy and Aquitaine and count of Anjou sends greetings to his archbishops, bishops, abbots, priors, earls, barons, sheriffs, reeves, ministers and all his bailiffs and faithful men inspecting the present charter. Know that we, at the prompting of God and for the health of our soul and the souls of our ancestors and successors, for the glory of holy Church and the improvement of our realm, freely and out of our good will have given and granted to the archbishops, bishops, abbots, priors, earls, barons and all of our realm these liberties written below to hold in our realm of England in perpetuity
center formatted
Right formattedIndented!
Double spacingNumbered list:1. 	 One2. 	 Two3. 	 Three
	 Edward by the grace of God King of England, lord of Ireland and duke of Aquitaine sends greetings to all to whom the present letters come. We have inspected the great charter of the lord Henry, late King of England, our father, concerning the liberties of England in these words:		 Henry by the grace of God King of England, lord of Ireland, duke of Normandy and Aquitaine and count of Anjou sends greetings to his archbishops, bishops, abbots, priors, earls, barons, sheriffs, reeves, ministers and all his bailiffs and faithful men inspecting the present charter. Know that we, at the prompting of God and for the health of our soul and the souls of our ancestors and successors, for the glory of holy Church and the improvement of our realm, freely and out of our good will have given and granted to the archbishops, bishops, abbots, priors, earls, barons and all of our realm these liberties written below to hold in our realm of England in perpetuity`);
	});

	test('reading in invalid RTF document', async () => {
		const rtfContent = Buffer.from("invalid rtf format", 'base64').toString('utf8');
		jest.spyOn(ipc, 'read').mockResolvedValue(rtfContent);
	    const content = await loadRtfFile("./docs/invalid.rtf");
	    expect(content).toBeUndefined();
	});
});